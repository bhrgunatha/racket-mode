«m:;; »«x:-*- racket-indent-sequence-depth: 100; racket-indent-curly-as-sequence: t; faceup-properties: (face syntax-table); -*-
»
«m:;;; »«x:NOTE: After changing this file you will need to M-x faceup-write-file
»«m:;;; »«x:to regenerate the .faceup test comparison file.
»«m:;;;»«x:
»«m:;;; »«x:NOTE: You may need to disable certain features temporarily while
»«m:;;; »«x:doing M-x faceup-write-file. See CONTRIBUTING.md for examples.
»
«m:;;; »«x:Quoted list
»
'(a b
  (a b
   c))

'((«c:1») «c:2» «c:3»
  («c:3»)
  «c:4» «c:5»)

«m:;;; »«x:Quasiquoted list (align with head) and unquote or unquote-splicing
»«m:;;; »«x:(use normal indent rules for the form).
»
`(Part ()
  (PartNumber ()
   ,part)
  (ETag ()
   ,etag))

`((,(x)
   ,y))

`(Delete
  ,@(«k:for/list» ([p («k:in-list» paths)])
      `(«t:Object» ()
        (Key () ,p))))

«m:;;; »«x:Syntax
»
«(syntax-table):(6):#'»(«k:for/list» ([x xs])
    x)

«(syntax-table):(6):#`»(«k:for/list» ([x xs])
    x)

«(syntax-table):(6):#'»(«k:#%app» («k:#%app» «b:hasheq» («k:quote» a) («k:quote» «c:42»))
         («k:quote» a))

(«k:#%app» («k:#%app» «b:hasheq» («k:quote» a) («k:quote» «c:42»))
       («k:quote» a))

«(syntax-table):(6):#'»(foo («k:#%app» «b:hasheq» («k:quote» a) («k:quote» «c:42»))
       («k:quote» a))

«m:;;; »«x:Rackjure style dictionary (when racket-indent-curly-as-sequence is t).
»
{a b
 c d}

{a b
 c d
 b '(a x
     s (x y
        x v))}

«m:;;; »«x:Vector
»
«(syntax-table):(6):#»(a b
  c d)

«m:;;; »«x:List with a keyword as first member (e.g. in many contracts)
»
(«:racket-keyword-argument-face:#:x» y
 «:racket-keyword-argument-face:#:y» x)

«m:;;; »«x:Normal function application.
»
(foobar x
        y
        z)

(foobar
 x
 y
 z)

(«b:dict-set» a
          b
          c)

(«b:dict-set»
 a
 b
 c)

(«b:call-with-values» («k:lambda» () («b:values» «c:1» «c:2»))
                  «b:+»)

(«b:call-with-values»
 («k:lambda» () («b:values» «c:1» «c:2»))
 «b:+»)

«m:;;; »«x:Forms with special indentation
»
(«k:let» ([«v:x» «c:0»])
  x)

(«k:let/cc» cc
  cc)

(«k:let/cc» cc «b::» «t:Any»
  cc)

«m:;; »«x:indent 2
»
(«k:syntax-case» stx ()
  [(«k:_» x) «(syntax-table):(6):#'»«c:#f»]
  [(«k:_» x y) «(syntax-table):(6):#'»«c:#t»])

«m:;; »«x:indent 3
»
(«k:syntax-case*» stx () x
  [(«k:_» x) «(syntax-table):(6):#'»«c:#f»]
  [(«k:_» x y) «(syntax-table):(6):#'»«c:#t»])

(«k:syntax-case*»
    stx
    («k:#%module-begin»
     «k:module»
     «k:define-values»
     «k:define-syntaxes»
     «k:define»
     «b:define/contract»
     «k:define-syntax»
     «k:struct»
     «k:define-struct»)
    x
  [(«k:_» x) «(syntax-table):(6):#'»«c:#f»]
  [(«k:_» x y) «(syntax-table):(6):#'»«c:#t»])

«m:;; »«x:begin and cond have 0 style
»(«k:begin»
  «c:0»
  «c:0»)

(«k:begin» «c:0»
       «c:0»)

(«k:cond» [«c:1» «c:2»]
      [«c:3» «c:4»])

(«k:cond»
  [«c:1» «c:2»]
  [«c:3» «c:4»])

(«k:if» a
    x
    x)

«m:;; »«x:begin*
»
(begin-for-foo «c:0»
               «c:0»)

(begin-for-foo
  «c:0»
  «c:0»)

(«k:with-handlers» ([x y])
  a b c)

«m:;; »«x:def, with-, call-with- and other 'defun style
»
(«k:define» («f:x») x x
  x)

(«k:struct» x x
  ())

(«b:match-define» («b:list» x y)
  («b:list» «c:1» «c:2»))

(«k:with-output-to-file» path «:racket-keyword-argument-face:#:mode» «:racket-reader-quoted-symbol-face:'text» «:racket-keyword-argument-face:#:exists» «:racket-reader-quoted-symbol-face:'replace»
  («k:λ» () («b:display» «s:"Hello, world."»)))

(«k:call-with-output-file» path «:racket-keyword-argument-face:#:mode» «:racket-reader-quoted-symbol-face:'text» «:racket-keyword-argument-face:#:exists» «:racket-reader-quoted-symbol-face:'replace»
  («k:λ» (out) («b:display» «s:"Hello, world."» out)))


«m:;;; »«x:Special forms: When the first non-distinguished form is on the
»«m:;;; »«x:same line as distinguished forms, disregard it for indent.
»
«m:;; »«x:module has indent 2
»
(«k:module» «c:1»
    «c:2»
  «c:3»
  «c:4»
  «c:5»)

«m:;; »«x:Normal case
»(«k:module» «c:1» «c:2»
  «c:3»
  «c:4»
  «c:5»)

«m:;; »«x:Weird case -- but this is how scheme-mode indents it.
»(«k:module» «c:1» «c:2» «c:3»
        «c:4»
        «c:5»)

«m:;; »«x:Weird case -- but this is how scheme-mode indents it.
»(«k:module» «c:1» «c:2» «c:3» «c:4»
        «c:5»)

«m:;;; »«x:for/fold
»
(«k:for/fold» ([a «c:0»]
           [b «c:0»])
          ([x «c:0»]
           [y «c:0»])
  «c:#t»)

(«k:for/fold»
    ([a «c:0»]
     [b «c:0»])
    ([x «c:0»]
     [y «c:0»])
  «c:#t»)

(«k:for/fold» «b::» T
          ([a «c:0»]
           [b «c:0»])
          ([x «c:0»]
           [y «c:0»])
  «c:#t»)

(«k:for/fold»
    «b::» T
    ([a «c:0»]
     [b «c:0»])
    ([x «c:0»]
     [y «c:0»])
  «c:#t»)

«m:;;; »«x:for/hasheq
»
(«k:for/hasheq» ([i («k:in-range» «c:1» «c:10»)])
  («b:values» i i))

(«k:for/hasheq»
    ([i («k:in-range» «c:1» «c:10»)])
  («b:values» i i))

(«k:for/hasheq» «b::» («t:Immutable-HashTable» «t:Number» «t:Number»)
            ([i («k:in-range» «c:1» «c:10»)])
  («b:values» i i))

(«k:for/hasheq»
    «b::» («t:Immutable-HashTable» «t:Number» «t:Number»)
    ([i («k:in-range» «c:1» «c:10»)])
  («b:values» i i))

«m:;;; »«x:Bug #50
»
'((x
   y) A
  z
  (x
   y) A
  z)

(«b:match» args
  [(«b:list» x) (x
             y)] «k:...»
  [(«b:list» x) (x y)] «k:...»
  [(«b:list» x) (x y)] «k:...»)

(«k:define-syntax» («f:fstruct» stx)
  («b:syntax-parse» stx
    [(«k:_» id:id (field:id «k:...»))
     («k:with-syntax» ([(accessor «k:...»)
                    («k:for/list» ([fld («k:in-list» («b:syntax->list» «(syntax-table):(6):#'»(«b:field» «k:...»)))])
                      («b:format-id» stx «s:"~a-~a"» («b:syntax->datum» «(syntax-table):(6):«:racket-reader-syntax-quoted-symbol-face:#'»»«:racket-reader-syntax-quoted-symbol-face:id») fld))])
       «(syntax-table):(6):#'»(serializable-struct
          id («b:field» «k:...») «:racket-keyword-argument-face:#:transparent»
          «:racket-keyword-argument-face:#:property» «b:prop:procedure»
          («k:lambda» (self . args)
            («b:match» args
              [(«b:list» «:racket-reader-quoted-symbol-face:'field») (accessor self)] «k:...»
              [(«b:list» («b:list» «:racket-reader-quoted-symbol-face:'field»)) (accessor self)] «k:...»
              [(«b:list» (list-rest «:racket-reader-quoted-symbol-face:'field» fields)) ((accessor self) fields)] «k:...»
              [(list-rest «:racket-reader-quoted-symbol-face:'field» f args)
               («k:struct-copy» id self
                            [«b:field» («k:apply» f (accessor self) args)])] «k:...»
              [(list-rest («b:list» «:racket-reader-quoted-symbol-face:'field») f args)  «m:;»«x:<-- THIS SEXPR IS INDENTED TOO FAR
»               («k:struct-copy» id self
                            [«b:field» («k:apply» f (accessor self) args)])] «k:...»
              [(list-rest (list-rest «:racket-reader-quoted-symbol-face:'field» fields) args)
               («k:struct-copy» id self
                            [«b:field» («k:apply» (accessor self) fields args)])] «k:...»))))]))

«m:;; »«x:Bug #123
»
«(syntax-table):(6):#hash»([a . («(syntax-table):(6):#hash»()
            «c:0»)]
      [b . («(syntax-table):(6):#hasheq»()
            «c:0»)]
      [c . («(syntax-table):(6):#fx»(«c:0» «c:1» «c:2»)
            «c:0»)]
      [d . («(syntax-table):(6):#fx3»(«c:0» «c:1» «c:2»)
            «c:0»)]
      [e . («(syntax-table):(6):#fl»(«c:0.0» «c:1.0» «c:2.0»)
            «c:0»)]
      [f . («(syntax-table):(6):#fl3»(«c:0.0» «c:1.0» «c:2.0»)
            «c:0»)]
      [g . («(syntax-table):(6):#s»(foo x)
            «c:0»)]
      [h . («(syntax-table):(6):#3»(«c:0» «c:1» «c:2»)
            «c:0»)])

«m:;; »«x:Bug #136
»
«(syntax-table):(6):«m:#;»»«:racket--sexp-comment--default:(»«:racket--sexp-comment--font-lock-builtin-face:list»«:racket--sexp-comment--default: »«:racket--sexp-comment--font-lock-constant-face:1»«:racket--sexp-comment--default:
        «(syntax-table):(6):#;»»«:racket--sexp-comment--font-lock-constant-face:2»«:racket--sexp-comment--default:
        »«:racket--sexp-comment--font-lock-constant-face:3»«:racket--sexp-comment--default:)»

(«b:list» «c:1»
      «(syntax-table):(6):«m:#;»»«:racket--sexp-comment--default:(»«:racket--sexp-comment--font-lock-builtin-face:list»«:racket--sexp-comment--default: »«:racket--sexp-comment--font-lock-constant-face:1»«:racket--sexp-comment--default:
              (»«:racket--sexp-comment--font-lock-keyword-face:let»«:racket--sexp-comment--default: ([»«:racket--sexp-comment--font-lock-variable-name-face:x»«:racket--sexp-comment--default: »«:racket--sexp-comment--font-lock-constant-face:2»«:racket--sexp-comment--default:]
                    «(syntax-table):(6):#;»[»«:racket--sexp-comment--font-lock-variable-name-face:y»«:racket--sexp-comment--default: »«:racket--sexp-comment--font-lock-constant-face:3»«:racket--sexp-comment--default:])
                x)
              »«:racket--sexp-comment--font-lock-constant-face:3»«:racket--sexp-comment--default:)»
      «c:2»
      «c:3»)

«m:;; »«x:Bug #243
»(«k:cond» [x y
         z]
      [(«b:=» a x) y
               z])

«m:;; »«x:Bug #262
»(define-metafunction «v:λL»
  ∪ «b::» (x «k:...») «k:...» «b:->» (x «k:...»)
  [(∪ any_ls «k:...»)
   ,(«k:apply» «b:append» (term (any_ls «k:...»)))])

«m:;; »«x:Issue #516
»(«k:lambda» (f [a «b::» «t:Number»]
           [b «b::» «t:Number»]) «b::» «t:Number»
  «c:10»)

(«k:lambda» (f [a «b::» «t:Number»]
           [b «b::» «t:Number»])
        «b::» «t:Number»
  «c:10»)

«m:;; »«x:Issue #521
»(define-judgment-form «v:L»
  «:racket-keyword-argument-face:#:mode» (⇓ I I O O)
  «:racket-keyword-argument-face:#:contract» (⇓ Γ e Δ v)

  [----------- Value
   (⇓ Γ v Γ v)]


  [(⇓ Γ e Δ («k:λ» (y) e_*))
   (⇓ Δ (subst e_* y x) Θ v)
   ------------------------- Application
   (⇓ Γ (e x) Θ v)])

«m:;; »«x:Issue #558
»(«k:module+» «f:test»
  («b:+»
   «c:1»
   «:racket-here-string-face:#<<EOF«(syntax-table):(15):
»()
EOF«(syntax-table):(15):
»»   )
  «c:1»)

(foo (bar «s:"
(abc)"»
          «b:this»
          «b:not»
          indented))

«m:;; »«x:Issue #569
»
(«k:for» «b::» «t:Void»
     ([i '(«c:1»)])
  («b:print» i))

(«k:for» «b::» «t:Void» ([i '(«c:1»)])
  («b:print» i))

(«k:for*» «b::» «t:Void»
      ([i '(«c:1»)])
  («b:print» i))

(«k:for*» «b::» «t:Void» ([i '(«c:1»)])
  («b:print» i))

(«k:let» «:racket-keyword-argument-face:#:forall» (A) ([x «b::» A «c:0»])
  x)

(«k:let» «:racket-keyword-argument-face:#:forall» (A)
     ([x «b::» A «c:0»])
  x)

(«k:let» «f:loop» ([«v:n» «c:0»])
  («b:displayln» n)
  («k:when» («b:<» n «c:5»)
    (loop («b:add1» n))))

(«k:let» «f:loop» ([«v:n» «b::» «t:Real» «c:1»])
  («k:if» («b:<» n «c:5»)
      (loop («b:add1» n))
      n))

(«k:let» «f:loop» «b::» («t:Listof» «t:Natural») ([accum «b::» («t:Listof» «t:Natural») «b:null»]
                              [lst   «b::» («t:Listof» «t:Natural») lst])
  («k:cond»
    [(«b:null?» lst)       accum]
    [(«b:even?» («b:car» lst)) (loop («b:cons» («b:car» lst) accum) («b:cdr» lst))]
    [«k:else»              (loop accum («b:cdr» lst))]))

(«k:let» «f:loop» «b::» («t:Listof» «t:Natural»)
     ([accum «b::» («t:Listof» «t:Natural») «b:null»]
      [lst   «b::» («t:Listof» «t:Natural») lst])
  («k:cond»
    [(«b:null?» lst)       accum]
    [(«b:even?» («b:car» lst)) (loop («b:cons» («b:car» lst) accum) («b:cdr» lst))]
    [«k:else»              (loop accum («b:cdr» lst))]))
